{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using PyTorch Tensors "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A PyTorch Tensor is basically the same as a numpy multidimensional array: it does not know\n",
    "anything about deep learning or computational graphs or gradients, and is just\n",
    "a generic n-dimensional array to be used for arbitrary numeric computation.\n",
    "\n",
    "The biggest difference between a numpy array and a PyTorch Tensor is that\n",
    "a PyTorch Tensor can run on either CPU or GPU. To run operations on the GPU,\n",
    "just cast the Tensor to a cuda datatype.\n",
    "\n",
    "(This example is adapted from: https://pytorch.org/tutorials/beginner/pytorch_with_examples.html )\n",
    "\n",
    "<img src=\"images/tensor.jpeg\" width=\"800\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Installation: https://pytorch.org/get-started/locally/\n",
    "\n",
    "On university linux server just run 'source activate mlearning' to enable pytorch environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What you should do\n",
    "- Read and run the examples 1-4 below\n",
    "- Do the exercices 5 and 6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Basic tensor matrix operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix m1: \n",
      " tensor([[1., 1., 1., 1.],\n",
      "        [1., 1., 1., 1.],\n",
      "        [1., 1., 1., 1.]])\n",
      "torch.Size([3, 4]) \n",
      "\n",
      "Matrix m2: \n",
      " tensor([[0.7289, 0.3559, 0.5102, 0.8279],\n",
      "        [0.8110, 0.6079, 0.9020, 0.5497],\n",
      "        [0.9805, 0.5091, 0.3915, 0.7743]])\n",
      "torch.Size([3, 4]) \n",
      "\n",
      "Matrix m2^T: \n",
      " tensor([[0.7289, 0.8110, 0.9805],\n",
      "        [0.3559, 0.6079, 0.5091],\n",
      "        [0.5102, 0.9020, 0.3915],\n",
      "        [0.8279, 0.5497, 0.7743]])\n",
      "torch.Size([4, 3]) \n",
      "\n",
      "Matrix m3: \n",
      " tensor([[0.7289, 0.3559, 0.5102, 0.8279],\n",
      "        [0.8110, 0.6079, 0.9020, 0.5497],\n",
      "        [0.9805, 0.5091, 0.3915, 0.7743]])\n",
      "torch.Size([3, 4]) \n",
      "\n",
      "Matrix m4: \n",
      " tensor([[2.4229, 2.8706, 2.6554],\n",
      "        [2.4229, 2.8706, 2.6554],\n",
      "        [2.4229, 2.8706, 2.6554]])\n",
      "torch.Size([3, 3]) \n",
      "\n",
      "Matrix m5: \n",
      " tensor([[2.4229, 2.8706, 2.6554],\n",
      "        [2.4229, 2.8706, 2.6554],\n",
      "        [2.4229, 2.8706, 2.6554]])\n",
      "torch.Size([3, 3]) \n",
      "\n",
      "tensor([16.1303, 16.1303, 16.1303])\n"
     ]
    }
   ],
   "source": [
    "# Simple matrix\n",
    "m1 = torch.ones(3, 4)\n",
    "print('Matrix m1: \\n', m1)\n",
    "print(m1.shape,\"\\n\")\n",
    "\n",
    "# Another (random) matrix\n",
    "m2 = torch.rand(3, 4) # fill 3x4 matrix with uniform random numbers in [0,1] interval\n",
    "print('Matrix m2: \\n', m2)\n",
    "print(m2.shape,\"\\n\")\n",
    "\n",
    "# Transpose of a matrix\n",
    "print('Matrix m2^T: \\n', m2.t())\n",
    "print(m2.t().shape,\"\\n\")\n",
    "\n",
    "# Matrix operations\n",
    "m3 = m1*m2      # Not a matrix multiplication ! Here each value in matrix m1 are multiplied by value m2\n",
    "print('Matrix m3: \\n', m3)\n",
    "print(m3.shape,\"\\n\")\n",
    "\n",
    "# Matrix multiplication using torch.mm\n",
    "m4 = m1.mm(m2.t())\n",
    "print('Matrix m4: \\n', m4)\n",
    "print(m4.shape,\"\\n\")\n",
    "\n",
    "# Matrix multiplication using torch.matmul\n",
    "m5 = m1.matmul(m2.t())\n",
    "print('Matrix m5: \\n', m5)\n",
    "print(m5.shape,\"\\n\")\n",
    "\n",
    "# For matrix-vector multiplication there is also the possibility to use torch.mv\n",
    "vec = torch.tensor([1.0,2.0,3.0])\n",
    "print(torch.mv(m5, vec))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. More operations (power, sum, clamp, ...)\n",
    "\n",
    "(See even more basic operations here: https://jhui.github.io/2018/02/09/PyTorch-Basic-operations/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[0.3169, 0.4698, 0.0166, 0.4849],\n",
      "        [0.4403, 0.5836, 0.7967, 0.5125],\n",
      "        [0.8109, 0.4540, 0.1926, 0.2353]])\n",
      "tensor([[3.1837e-02, 1.0370e-01, 4.5840e-06, 1.1398e-01],\n",
      "        [8.5344e-02, 1.9880e-01, 5.0571e-01, 1.3465e-01],\n",
      "        [5.3317e-01, 9.3583e-02, 7.1463e-03, 1.3026e-02]])\n",
      "tensor(5.3142)\n",
      "tensor([[0.3169, 0.4698, 0.3000, 0.4849],\n",
      "        [0.4403, 0.5836, 0.7000, 0.5125],\n",
      "        [0.7000, 0.4540, 0.3000, 0.3000]])\n"
     ]
    }
   ],
   "source": [
    "mat = torch.rand(3, 4)\n",
    "print(mat)\n",
    "\n",
    "# Takes the power of each element in input\n",
    "print(mat.pow(3))\n",
    "\n",
    "# Returns the sum of all elements in the input tensor\n",
    "print(mat.sum())\n",
    "\n",
    "# Clamp all elements in input into the range [ min, max ] and return a resulting tensor\n",
    "print(mat.clamp(0.3,0.7))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Convertion to numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([-1.5090,  0.6983, -0.8755, -0.4542,  0.5901])\n",
      "[-1.5089948   0.6983435  -0.8755054  -0.4541607   0.59014404]\n",
      "tensor([-1.5090,  0.6983, -0.8755, -0.4542,  0.5901])\n"
     ]
    }
   ],
   "source": [
    "# convertion PyTorch -> numpy\n",
    "a = torch.randn(5)\n",
    "b = a.numpy()\n",
    "\n",
    "# convertion numpy -> PyTorch\n",
    "c = torch.from_numpy(b)\n",
    "\n",
    "print(a)\n",
    "print(b)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Example using automatic differentiation (Autograd)\n",
    "\n",
    "A PyTorch Tensor represents a node in a computational graph. If ``x`` is a\n",
    "Tensor that has ``x.requires_grad=True`` then ``x.grad`` is another Tensor\n",
    "holding the gradient of ``x`` with respect to some scalar value.\n",
    "\n",
    "Example for simple regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\t x=1.0 y=10.0, w=1.00, dloss/dw=-18.0\n",
      "\t x=2.0 y=20.0, w=1.18, dloss/dw=-70.6\n",
      "\t x=3.0 y=30.0, w=1.89, dloss/dw=-146.1\n",
      "\t x=4.0 y=40.0, w=3.35, dloss/dw=-212.9\n",
      "\t x=5.0 y=50.0, w=5.48, dloss/dw=-226.2\n",
      "Loss at epoch #1: 511.797760 \n",
      "\n",
      "\t x=1.0 y=10.0, w=7.74, dloss/dw=-4.5\n",
      "\t x=2.0 y=20.0, w=7.78, dloss/dw=-17.7\n",
      "\t x=3.0 y=30.0, w=7.96, dloss/dw=-36.7\n",
      "\t x=4.0 y=40.0, w=8.33, dloss/dw=-53.5\n",
      "\t x=5.0 y=50.0, w=8.86, dloss/dw=-56.9\n",
      "Loss at epoch #2: 32.337894 \n",
      "\n",
      "\t x=1.0 y=10.0, w=9.43, dloss/dw=-1.1\n",
      "\t x=2.0 y=20.0, w=9.44, dloss/dw=-4.5\n",
      "\t x=3.0 y=30.0, w=9.49, dloss/dw=-9.2\n",
      "\t x=4.0 y=40.0, w=9.58, dloss/dw=-13.5\n",
      "\t x=5.0 y=50.0, w=9.71, dloss/dw=-14.3\n",
      "Loss at epoch #3: 2.043265 \n",
      "\n",
      "\t x=1.0 y=10.0, w=9.86, dloss/dw=-0.3\n",
      "\t x=2.0 y=20.0, w=9.86, dloss/dw=-1.1\n",
      "\t x=3.0 y=30.0, w=9.87, dloss/dw=-2.3\n",
      "\t x=4.0 y=40.0, w=9.89, dloss/dw=-3.4\n",
      "\t x=5.0 y=50.0, w=9.93, dloss/dw=-3.6\n",
      "Loss at epoch #4: 0.129104 \n",
      "\n",
      "\t x=1.0 y=10.0, w=9.96, dloss/dw=-0.1\n",
      "\t x=2.0 y=20.0, w=9.96, dloss/dw=-0.3\n",
      "\t x=3.0 y=30.0, w=9.97, dloss/dw=-0.6\n",
      "\t x=4.0 y=40.0, w=9.97, dloss/dw=-0.9\n",
      "\t x=5.0 y=50.0, w=9.98, dloss/dw=-0.9\n",
      "Loss at epoch #5: 0.008157 \n",
      "\n",
      "Final: w = 9.9910\n"
     ]
    }
   ],
   "source": [
    "# Simple regression example\n",
    "x = [1., 2., 3., 4., 5.]           # data\n",
    "y = [10., 20., 30., 40., 50.]      # target values\n",
    "\n",
    "# Gradients will be calculated w.r.t this tensors (has \"requires_grad=True\")\n",
    "w = torch.tensor([1.],requires_grad=True)\n",
    "\n",
    "# Number of loops on all sample\n",
    "for epoch in range(5):\n",
    "    \n",
    "    # Loop on data events and target values\n",
    "    for x_i, y_i in zip(x, y):\n",
    "        \n",
    "        # compute predicted target variable\n",
    "        y_pred = x_i * w\n",
    "                \n",
    "        # compute Mean Squared Error (MSE)\n",
    "        loss = (y_pred - y_i) ** 2\n",
    "        \n",
    "        # With PyTorch we can automatically compute the derivative of the loss \n",
    "        # w.r.t. the tensors that have requires_grad set to True (i.e. weights).\n",
    "        # compute gradients\n",
    "        loss.backward()\n",
    "                        \n",
    "        print('\\t x=%.1f y=%.1f, w=%.2f, dloss/dw=%.1f' % (x_i, y_i, w.data, w.grad.data))\n",
    "                \n",
    "        # make one step towards the local minima, with learning rate 0.01\n",
    "        w.data -= 0.01 * w.grad.data\n",
    "        \n",
    "        # clear gradients after updating weights\n",
    "        w.grad.data.zero_()\n",
    "        \n",
    "    print('Loss at epoch #%d: %.6f \\n' % (epoch+1, loss.data[0]))\n",
    "\n",
    "print('Final: w = %.4f' % (w.data))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Exercice: modify the previous example on this new data\n",
    "Now we have the following data. How should be modified the above code ? How many epochs are needed for convergence ?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\t x=1.0 y=15.0, w=1.00, dloss/dw=-28.0\n",
      "\t x=2.0 y=25.0, w=1.28, dloss/dw=-89.8\n",
      "\t x=3.0 y=35.0, w=2.18, dloss/dw=-170.8\n",
      "\t x=4.0 y=45.0, w=3.89, dloss/dw=-235.7\n",
      "\t x=5.0 y=55.0, w=6.24, dloss/dw=-237.9\n",
      "\t x=6.0 y=65.0, w=8.62, dloss/dw=-159.3\n",
      "\t x=7.0 y=75.0, w=10.21, dloss/dw=-49.0\n",
      "\t x=8.0 y=85.0, w=10.70, dloss/dw=10.1\n",
      "\t x=9.0 y=95.0, w=10.60, dloss/dw=7.7\n",
      "\t x=10.0 y=105.0, w=10.53, dloss/dw=5.3\n",
      "Loss at epoch #1: 0.068977 \n",
      "\n",
      "\t x=1.0 y=15.0, w=10.47, dloss/dw=-9.1\n",
      "\t x=2.0 y=25.0, w=10.56, dloss/dw=-15.5\n",
      "\t x=3.0 y=35.0, w=10.72, dloss/dw=-17.1\n",
      "\t x=4.0 y=45.0, w=10.89, dloss/dw=-11.5\n",
      "\t x=5.0 y=55.0, w=11.00, dloss/dw=0.2\n",
      "\t x=6.0 y=65.0, w=11.00, dloss/dw=12.2\n",
      "\t x=7.0 y=75.0, w=10.88, dloss/dw=16.3\n",
      "\t x=8.0 y=85.0, w=10.72, dloss/dw=11.9\n",
      "\t x=9.0 y=95.0, w=10.60, dloss/dw=7.0\n",
      "\t x=10.0 y=105.0, w=10.53, dloss/dw=5.7\n",
      "Loss at epoch #2: 0.081671 \n",
      "\n",
      "\t x=1.0 y=15.0, w=10.47, dloss/dw=-9.1\n",
      "\t x=2.0 y=25.0, w=10.56, dloss/dw=-15.5\n",
      "\t x=3.0 y=35.0, w=10.72, dloss/dw=-17.1\n",
      "\t x=4.0 y=45.0, w=10.89, dloss/dw=-11.6\n",
      "\t x=5.0 y=55.0, w=11.00, dloss/dw=0.2\n",
      "\t x=6.0 y=65.0, w=11.00, dloss/dw=12.1\n",
      "\t x=7.0 y=75.0, w=10.88, dloss/dw=16.3\n",
      "\t x=8.0 y=85.0, w=10.72, dloss/dw=11.9\n",
      "\t x=9.0 y=95.0, w=10.60, dloss/dw=7.0\n",
      "\t x=10.0 y=105.0, w=10.53, dloss/dw=5.7\n",
      "Loss at epoch #3: 0.081671 \n",
      "\n",
      "\t x=1.0 y=15.0, w=10.47, dloss/dw=-9.1\n",
      "\t x=2.0 y=25.0, w=10.56, dloss/dw=-15.5\n",
      "\t x=3.0 y=35.0, w=10.72, dloss/dw=-17.1\n",
      "\t x=4.0 y=45.0, w=10.89, dloss/dw=-11.6\n",
      "\t x=5.0 y=55.0, w=11.00, dloss/dw=0.2\n",
      "\t x=6.0 y=65.0, w=11.00, dloss/dw=12.1\n",
      "\t x=7.0 y=75.0, w=10.88, dloss/dw=16.3\n",
      "\t x=8.0 y=85.0, w=10.72, dloss/dw=11.9\n",
      "\t x=9.0 y=95.0, w=10.60, dloss/dw=7.0\n",
      "\t x=10.0 y=105.0, w=10.53, dloss/dw=5.7\n",
      "Loss at epoch #4: 0.081671 \n",
      "\n",
      "\t x=1.0 y=15.0, w=10.47, dloss/dw=-9.1\n",
      "\t x=2.0 y=25.0, w=10.56, dloss/dw=-15.5\n",
      "\t x=3.0 y=35.0, w=10.72, dloss/dw=-17.1\n",
      "\t x=4.0 y=45.0, w=10.89, dloss/dw=-11.6\n",
      "\t x=5.0 y=55.0, w=11.00, dloss/dw=0.2\n",
      "\t x=6.0 y=65.0, w=11.00, dloss/dw=12.1\n",
      "\t x=7.0 y=75.0, w=10.88, dloss/dw=16.3\n",
      "\t x=8.0 y=85.0, w=10.72, dloss/dw=11.9\n",
      "\t x=9.0 y=95.0, w=10.60, dloss/dw=7.0\n",
      "\t x=10.0 y=105.0, w=10.53, dloss/dw=5.7\n",
      "Loss at epoch #5: 0.081671 \n",
      "\n",
      "Final: w = 10.4714\n"
     ]
    }
   ],
   "source": [
    "# Now we have the following data. How should be modified the above code \n",
    "x = [1., 2., 3., 4., 5., 6., 7., 8., 9., 10.]           # data\n",
    "y = [15., 25., 35., 45., 55., 65., 75., 85., 95., 105.] # target values\n",
    "\n",
    "# Gradients will be calculated w.r.t this tensors (has \"requires_grad=True\")\n",
    "w = torch.tensor([1.],requires_grad=True)\n",
    "\n",
    "# Number of loops on all sample\n",
    "for epoch in range(5):\n",
    "    \n",
    "    # Loop on data events and target values\n",
    "    for x_i, y_i in zip(x, y):\n",
    "        \n",
    "        # compute predicted target variable\n",
    "        y_pred = x_i * w\n",
    "                \n",
    "        # compute Mean Squared Error (MSE)\n",
    "        loss = (y_pred - y_i) ** 2\n",
    "        \n",
    "        # With PyTorch we can automatically compute the derivative of the loss \n",
    "        # w.r.t. the tensors that have requires_grad set to True (i.e. weights).\n",
    "        # compute gradients\n",
    "        loss.backward()\n",
    "                        \n",
    "        print('\\t x=%.1f y=%.1f, w=%.2f, dloss/dw=%.1f' % (x_i, y_i, w.data, w.grad.data))\n",
    "                \n",
    "        # make one step towards the local minima, with learning rate 0.01\n",
    "        w.data -= 0.01 * w.grad.data\n",
    "        \n",
    "        # clear gradients after updating weights\n",
    "        w.grad.data.zero_()\n",
    "        \n",
    "    print('Loss at epoch #%d: %.6f \\n' % (epoch+1, loss.data[0]))\n",
    "\n",
    "print('Final: w = %.4f' % (w.data))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## 6. Exercice: Simple Neural Network implementation\n",
    "\n",
    "We consider a fully-connected ReLU network with one hidden layer of 100 neurons and no biases, trained to predict y from x by minimizing squared Euclidean distance.\n",
    "\n",
    "The model that we want to build has the following structure:\n",
    "$$\\hat{y}(x) = \\text{relu}(x.w_1).w_2,$$\n",
    "where $x$ and $y$ are the input and output features (of dimension 1000 and 10, respectively). N=64 examples are considered for the training. Here the relu activation function is used and $w_1$ and $w_2$ are weight matrices.\n",
    "\n",
    "This implementation computes the forward pass using operations on PyTorch Tensors, and uses PyTorch autograd to compute gradients."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtype = torch.float\n",
    "device = torch.device(\"cpu\")\n",
    "# device = torch.device(\"cuda:0\") # Uncomment this to run on GPU (if you have a GPU !)\n",
    "\n",
    "# Data dimensions\n",
    "N = 64      # N: input batch size\n",
    "D_in = 1000 # D_in: input dimension\n",
    "H = 100     # H: hidden layer dimension;\n",
    "D_out = 10  # D_out: output dimension\n",
    "\n",
    "# NN settings\n",
    "learning_rate = 1e-6\n",
    "N_epochs = 500\n",
    "\n",
    "# Create random Tensors to hold input and outputs.\n",
    "# Default setting requires_grad=False indicates that we do not need to compute gradients\n",
    "# with respect to these Tensors during the backward pass.\n",
    "x = torch.randn(N, D_in, device=device, dtype=dtype)\n",
    "y = torch.randn(N, D_out, device=device, dtype=dtype)\n",
    "\n",
    "# Create random Tensors for weights.\n",
    "# Setting requires_grad=True indicates that we want to compute gradients with\n",
    "# respect to these Tensors during the backward pass.\n",
    "w1 = torch.randn(D_in, H, device=device, dtype=dtype, requires_grad=True)\n",
    "w2 = torch.randn(H, D_out, device=device, dtype=dtype, requires_grad=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train network using pytorch\n",
    "\n",
    "Implement the following:\n",
    "- The model: $$\\hat{y}(x) = \\text{relu}(x.w_1).w_2,$$\n",
    "- The loss function: $$\\sum_{i=1}^{i=64}(\\hat{y}(x_i) - y_i)^2$$\n",
    "- The gradient and the weight update\n",
    "- Train for N_epochs\n",
    "- Validation: at each epoch test the model on an independently created sample (see below)\n",
    "- Store the loss values of the train and validation sample for each epoch\n",
    "- Do the training and validation steps for N_epochs\n",
    "- Finally, plot the evolution of cost as a function of the number of iterations.\n",
    "\n",
    "Conclude on the generalization of the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Independent validation sample, on which the model is tested at each epoch\n",
    "x_val = torch.randn(N, D_in, device=device, dtype=dtype)\n",
    "y_val = torch.randn(N, D_out, device=device, dtype=dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 0.1648,  0.1591,  0.7083,  ..., -1.9261, -0.1467, -1.2472],\n",
      "        [-1.3532,  0.3614,  0.4141,  ..., -0.4647,  1.6579,  1.0270],\n",
      "        [ 1.4414,  1.5264, -1.2747,  ..., -0.7168,  0.2239, -0.6293],\n",
      "        ...,\n",
      "        [-0.1885,  0.3445,  1.5954,  ..., -1.5043,  0.4962,  0.1209],\n",
      "        [ 1.3093,  0.7991, -0.8501,  ...,  1.6182, -0.8827, -1.5413],\n",
      "        [-1.6412,  0.1059,  0.1225,  ...,  0.1364,  0.1022,  1.1069]])\n",
      "tensor([[ 7.1808e-01, -1.7924e-01,  5.9874e-02, -1.0329e+00, -6.7265e-01,\n",
      "          1.8328e-01, -3.0523e-01,  1.0211e+00, -2.0124e-02,  1.0956e+00],\n",
      "        [ 4.9256e-01,  6.9941e-01, -1.9238e+00, -6.4168e-02, -1.6435e-01,\n",
      "         -7.8831e-01,  2.2429e+00, -2.2367e-01,  9.9142e-01, -1.8047e+00],\n",
      "        [-7.6539e-01, -6.3013e-01, -7.7056e-01, -3.3459e-01,  2.7086e+00,\n",
      "          5.2653e-01, -8.9476e-01,  5.5844e-01,  4.2174e-01,  5.6479e-01],\n",
      "        [ 3.6258e-01, -1.4580e+00,  1.3592e+00, -1.8788e-01, -2.1607e+00,\n",
      "         -1.3234e+00,  1.4388e-01,  1.0719e+00,  1.1758e+00, -1.5846e+00],\n",
      "        [-1.1086e+00,  1.7091e-01, -1.7720e+00, -1.4387e+00, -4.9470e-01,\n",
      "          3.2292e-01,  1.1997e-01,  1.2468e+00,  1.0774e-01,  1.4432e+00],\n",
      "        [ 8.5114e-01, -1.4585e+00, -9.9315e-02, -2.9331e-01, -2.1491e-02,\n",
      "         -1.7155e+00,  8.4596e-01,  1.5455e+00, -2.9168e-01, -1.9609e-01],\n",
      "        [ 1.5640e-01, -2.5221e-03,  2.7832e-02,  2.8533e-01, -8.1863e-01,\n",
      "          2.3584e-01,  8.8602e-01, -6.3526e-01, -3.6128e-01,  9.4836e-01],\n",
      "        [ 4.4287e-01,  5.9670e-01, -1.1298e+00, -1.0003e+00, -6.1946e-01,\n",
      "          6.2133e-01,  7.6208e-01,  8.8038e-01,  4.8819e-01, -3.8238e-01],\n",
      "        [-1.3052e+00,  1.7600e+00, -3.5600e-01,  6.7522e-01, -8.3287e-01,\n",
      "         -1.0359e+00, -1.1001e+00,  1.7621e+00,  5.5413e-01,  1.7293e+00],\n",
      "        [ 8.9799e-01, -1.9909e-01, -1.4869e+00,  1.8449e-01,  1.4329e+00,\n",
      "         -6.7392e-01,  1.7344e-01,  2.7826e-01, -1.9863e+00, -1.6742e+00],\n",
      "        [-4.5678e-01,  3.5561e-01,  1.9632e-01,  6.2211e-02,  2.6960e-01,\n",
      "         -1.3102e+00, -7.8439e-01, -1.9929e-01,  2.4191e-01, -1.8599e+00],\n",
      "        [-4.1839e-01, -1.0116e-01, -1.4688e+00,  1.5713e+00,  1.0556e+00,\n",
      "          2.5130e-01,  7.6441e-01, -1.4972e+00,  8.3419e-01, -1.1439e+00],\n",
      "        [-1.2183e+00,  8.9184e-01,  2.1650e-01, -6.3649e-01,  1.7226e-01,\n",
      "          1.4641e+00, -4.7687e-01,  9.2971e-01, -9.7406e-01,  1.1419e-01],\n",
      "        [-1.7291e+00, -1.3222e+00, -3.2005e+00,  1.6205e+00, -5.4302e-01,\n",
      "          1.5487e+00,  1.5351e-01, -5.3019e-01,  4.9711e-01, -5.6225e-01],\n",
      "        [-7.6137e-01,  1.0938e+00,  1.0653e+00,  1.2197e+00, -8.1186e-02,\n",
      "          1.1434e+00, -5.3024e-01, -8.4131e-01,  5.4777e-01, -8.0192e-01],\n",
      "        [ 1.3671e+00, -2.3760e-01, -2.5087e-01,  3.6917e-01,  1.7365e+00,\n",
      "         -1.1733e+00,  5.3121e-01, -7.0993e-01, -6.3613e-01, -6.1104e-01],\n",
      "        [ 1.0640e+00,  3.1160e-01, -9.5480e-01,  9.1494e-02,  1.5210e+00,\n",
      "         -8.6651e-01, -4.7810e-01, -1.1835e-01, -9.7850e-01, -3.5910e-01],\n",
      "        [-5.6757e-01, -8.2811e-01, -6.9540e-01,  7.8934e-01,  1.0764e+00,\n",
      "          2.0855e-01, -5.0016e-01,  4.2047e-01,  6.0961e-01, -1.3400e+00],\n",
      "        [ 1.3799e+00,  6.1419e-01,  7.1322e-01,  9.7567e-01, -2.3679e-01,\n",
      "         -7.9106e-01, -8.4879e-01,  4.7725e-01, -7.6392e-02,  1.7509e-01],\n",
      "        [ 2.3909e-01, -3.5766e-01, -5.7129e-01, -8.9638e-01,  7.8286e-01,\n",
      "         -3.7730e-01, -1.9622e-01, -9.9703e-01, -1.6760e+00, -4.4622e-01],\n",
      "        [ 1.1784e+00, -2.2925e-01,  1.5962e+00, -1.1303e-02, -1.6199e-01,\n",
      "          5.7167e-01,  4.0370e-01, -1.8560e+00,  1.1852e+00,  8.1189e-01],\n",
      "        [ 2.0105e-02,  1.1852e-01,  1.4618e+00,  8.9405e-02, -1.7262e+00,\n",
      "          5.6786e-01,  9.5506e-01, -5.0951e-02, -2.9227e+00,  1.9448e+00],\n",
      "        [-1.2180e+00,  5.1757e-01,  9.3696e-01,  6.6945e-01,  1.0328e+00,\n",
      "          2.9154e-01,  8.5745e-01,  1.7882e+00, -5.4802e-01,  1.5801e-01],\n",
      "        [ 4.8771e-01, -7.3363e-01,  7.8793e-01,  2.1050e-01, -1.7283e-02,\n",
      "          6.0719e-01,  8.8730e-02,  2.2631e-01, -6.3829e-01, -1.0819e+00],\n",
      "        [ 5.7855e-01, -1.2840e+00,  8.2537e-01, -8.9634e-02,  1.8632e+00,\n",
      "         -1.5853e+00, -1.4898e+00,  1.2778e+00, -9.5359e-01,  7.0515e-01],\n",
      "        [ 1.0700e+00, -2.7947e+00,  1.4645e-01,  1.5547e+00, -9.2904e-02,\n",
      "          4.2513e-01,  1.6187e+00, -9.2010e-01,  1.4712e-01,  7.8083e-01],\n",
      "        [ 8.9036e-01,  2.6488e-01, -5.0414e-01,  1.9957e+00, -3.5071e-01,\n",
      "          2.7001e-01, -2.0842e+00, -5.2345e-01,  1.4623e+00, -1.2944e+00],\n",
      "        [ 7.8716e-01,  1.0529e+00,  5.7409e-01, -3.2380e-01,  2.2042e-02,\n",
      "          6.0075e-01, -5.9008e-01, -1.7276e+00,  1.1124e+00, -1.3144e+00],\n",
      "        [-7.6497e-01, -1.4562e+00, -8.1383e-01,  6.9421e-01, -3.4315e-01,\n",
      "          2.0345e+00,  1.9467e-01, -1.2170e-01,  5.2370e-01,  2.4495e-01],\n",
      "        [-6.1312e-01, -9.6873e-02,  3.7579e-01,  6.3871e-01, -3.5134e-01,\n",
      "         -1.2705e+00, -3.7468e-01,  1.0240e-01, -5.1475e-01,  4.0349e-01],\n",
      "        [ 4.6048e-01,  8.5037e-02,  7.7737e-01,  7.4718e-02,  1.9761e+00,\n",
      "          5.1369e-01, -1.3496e-01, -1.7176e+00,  6.3014e-01, -1.2371e+00],\n",
      "        [ 1.8770e-01, -1.3966e+00, -8.0560e-01,  4.5954e-01,  2.2493e-01,\n",
      "         -6.2596e-01, -1.2410e+00,  1.6198e+00,  7.3868e-01,  1.5283e+00],\n",
      "        [ 3.2685e-01, -1.0048e+00, -7.2301e-02, -1.4769e+00, -1.6303e-01,\n",
      "         -1.2516e-01, -1.0769e+00,  2.8083e-01,  7.6871e-01, -2.4710e-01],\n",
      "        [-1.9097e+00,  6.1016e-01,  5.0001e-01,  5.0559e-01,  2.3889e-01,\n",
      "         -1.0993e+00, -8.0545e-01,  1.3210e+00,  1.8032e-01, -7.9479e-01],\n",
      "        [-4.3700e-01,  3.9135e-01, -9.2641e-01, -4.4653e-01, -2.5598e+00,\n",
      "          1.8614e+00,  7.5288e-01,  4.9106e-01, -1.8756e+00,  1.0688e-01],\n",
      "        [ 9.7453e-01,  5.5222e-01, -9.3984e-01,  4.7732e-01, -7.3101e-01,\n",
      "          9.8438e-01,  1.7505e+00,  5.6511e-01, -1.2527e+00, -8.9670e-01],\n",
      "        [ 1.4442e-01,  9.4680e-01, -1.0322e-01, -1.6531e-01, -4.9509e-01,\n",
      "         -7.0056e-01, -3.6474e-01,  3.7671e-01,  1.9479e-01,  4.1709e-01],\n",
      "        [-1.6519e+00,  1.8431e-01,  1.8335e-01, -1.0855e-01,  1.7857e-01,\n",
      "         -4.5315e-01, -2.3864e-02,  1.8579e+00,  1.0682e+00, -1.3597e+00],\n",
      "        [ 1.3695e+00,  8.2790e-01, -1.8087e+00,  1.3276e+00,  1.1645e-01,\n",
      "          7.1024e-01, -2.3570e-01,  5.5677e-02, -9.5598e-01,  2.8873e-01],\n",
      "        [-1.8407e-01,  6.8398e-01, -8.1309e-01,  8.9529e-01, -1.9331e-01,\n",
      "         -1.9647e+00, -5.1265e-01,  1.7798e+00,  3.2358e+00, -4.6585e-01],\n",
      "        [-1.6929e+00, -1.1573e+00, -1.4121e-01,  1.3007e+00, -7.5155e-01,\n",
      "          4.0071e-01, -1.1677e+00,  9.1967e-01,  1.0474e+00, -6.5731e-01],\n",
      "        [-2.1616e-01,  1.4159e+00, -8.5624e-01, -1.0559e+00, -3.3210e-01,\n",
      "          1.2624e+00,  3.3503e-01,  2.1103e-01,  9.2758e-01,  3.9237e-01],\n",
      "        [ 1.0721e+00, -9.7128e-02,  8.0433e-01,  1.3990e+00,  5.1148e-01,\n",
      "         -9.3312e-01,  2.9757e-02, -3.1181e+00,  3.7290e-03,  5.7150e-01],\n",
      "        [-1.0948e+00,  1.8242e-01,  4.0909e-01,  1.0397e-01,  9.3511e-01,\n",
      "          2.3944e-01, -1.9045e+00,  1.5498e+00,  2.3267e-01, -6.6973e-01],\n",
      "        [ 1.8175e-01, -1.3585e+00,  3.7180e-01, -1.8137e-01,  1.3972e-02,\n",
      "          1.1717e+00,  3.8721e-01,  2.1084e-01, -5.4434e-01, -4.6697e-01],\n",
      "        [ 4.2643e-01, -5.8327e-02, -5.7895e-01, -2.4928e-01, -6.4749e-01,\n",
      "          3.8222e-01,  4.8327e-01, -8.9565e-01, -7.0609e-01,  1.1160e-01],\n",
      "        [-2.6076e+00,  1.2879e+00, -2.7839e-01,  9.7526e-01, -6.2602e-01,\n",
      "          9.9198e-01,  5.0584e-01,  6.3625e-01, -1.2754e+00,  1.0069e+00],\n",
      "        [-1.7518e+00,  1.8776e-01,  2.7774e-01, -3.6151e-01,  1.7997e+00,\n",
      "          5.7222e-01, -3.0422e-01, -6.7301e-01, -2.5263e-01,  4.9523e-01],\n",
      "        [ 5.8253e-01,  4.8408e-01,  8.0377e-02,  7.5137e-01, -1.9778e+00,\n",
      "         -1.0967e+00,  5.4393e-01,  1.5192e+00,  5.6974e-01,  4.4264e-01],\n",
      "        [-6.2301e-01,  1.8607e+00,  3.5316e-01, -8.5445e-01, -7.1050e-01,\n",
      "         -1.8699e+00,  1.0944e+00, -1.0261e+00,  1.7825e+00,  1.2941e+00],\n",
      "        [ 6.1924e-01, -8.1665e-02,  9.2449e-01, -5.7649e-01, -4.1199e-01,\n",
      "          2.5250e-01, -3.5557e-01, -9.0878e-01, -5.2184e-01,  1.6490e+00],\n",
      "        [-3.2914e-01, -4.2043e-01,  3.8898e-01, -2.6981e-01,  9.4219e-01,\n",
      "         -4.3667e-01,  6.6855e-01, -1.4667e+00,  7.7724e-01, -1.2987e+00],\n",
      "        [-2.3458e+00, -1.4983e+00,  2.9859e-01, -3.4774e-01,  5.9762e-01,\n",
      "         -9.4120e-01, -1.6494e-01,  1.2024e+00, -5.6213e-01,  6.5771e-01],\n",
      "        [ 3.5124e-01,  7.1363e-01, -6.8930e-01, -8.1063e-01, -9.0529e-01,\n",
      "          2.1145e-01,  5.0629e-01, -6.4200e-01, -2.4122e-01,  1.4765e+00],\n",
      "        [ 4.4416e-01,  2.1056e-01, -4.9406e-01,  1.7157e+00,  8.5154e-01,\n",
      "         -2.6638e+00, -1.5737e+00, -2.3002e-01, -3.4606e-01,  7.4687e-01],\n",
      "        [ 7.0093e-01, -5.8006e-03, -5.6467e-01, -1.0552e+00, -7.6887e-01,\n",
      "         -1.5128e-01, -1.8273e+00,  1.8838e+00,  1.2924e+00, -6.3062e-01],\n",
      "        [-3.9481e-01, -3.7997e-01, -3.0919e-01, -1.3321e+00,  1.0835e+00,\n",
      "          1.6430e+00,  8.0868e-01, -1.2356e+00,  7.8340e-02, -5.2293e-01],\n",
      "        [-3.6086e-01,  9.8573e-01, -1.0073e+00, -1.1533e-01,  1.6995e+00,\n",
      "         -6.9854e-01,  2.5831e-02,  4.4062e-02, -1.5118e+00,  6.1098e-01],\n",
      "        [ 1.2539e+00,  1.0139e-01, -9.2922e-01, -1.7836e+00, -1.9863e-01,\n",
      "         -8.3037e-01,  1.9261e-01, -3.1608e-01,  1.2014e+00,  2.8264e-01],\n",
      "        [-1.5554e-01, -7.2447e-01, -9.2004e-02, -4.8168e-01, -3.4068e-02,\n",
      "         -2.2821e-02,  1.2839e+00,  2.8547e+00, -4.5580e-01, -7.1051e-01],\n",
      "        [ 1.3500e+00,  5.9165e-01, -9.9187e-01, -8.7547e-01,  5.8716e-01,\n",
      "         -1.7549e+00,  3.2955e-01,  1.3506e+00, -1.0513e+00, -1.3473e+00],\n",
      "        [-3.4648e+00,  7.4530e-01, -5.4715e-01,  1.8968e+00,  3.8297e-01,\n",
      "         -5.2951e-01,  7.3270e-01,  1.6005e+00, -1.2964e-01, -4.2719e-01],\n",
      "        [-7.3361e-01, -6.6781e-01,  1.3673e+00,  1.0915e-01, -5.6547e-02,\n",
      "         -1.9298e+00, -4.3975e-01,  3.6979e-01,  3.1572e-01,  3.5815e-01],\n",
      "        [-6.5134e-01, -1.1404e-02, -6.5265e-01, -7.2766e-01,  5.5365e-01,\n",
      "          4.4088e-01, -1.0086e+00,  7.1111e-01, -3.0169e-01,  1.2181e-01],\n",
      "        [-7.8616e-01,  2.1306e+00,  1.4025e-02, -4.3831e-01, -4.0076e-02,\n",
      "         -1.0125e-01, -9.4985e-01,  2.2413e+00, -8.1960e-01, -7.3910e-02],\n",
      "        [-1.0325e-01, -1.0467e+00,  7.8136e-01, -2.5876e-01,  4.2672e-01,\n",
      "         -2.0094e+00,  3.1546e-01, -3.7188e-02,  1.2359e+00,  2.0363e-01],\n",
      "        [ 6.3433e-02, -8.1917e-01,  8.6822e-02, -1.8809e+00,  3.3688e-01,\n",
      "          4.2290e-01,  5.7732e-01, -8.8294e-01, -1.6561e+00, -1.9876e-01],\n",
      "        [ 9.4934e-01, -6.2942e-01,  7.0686e-01, -9.9042e-01, -5.7201e-01,\n",
      "          3.6249e-01,  9.9156e-02,  9.8107e-01, -1.8771e+00,  5.7908e-01],\n",
      "        [ 4.9124e-02, -9.1432e-01,  7.3654e-01,  1.1167e+00, -9.5109e-02,\n",
      "          1.8892e+00,  3.0018e-01,  3.2218e-02,  4.2452e-01, -1.5345e+00],\n",
      "        [-5.0970e-02, -1.8236e+00,  2.5754e-01, -6.9633e-01,  1.0183e-01,\n",
      "          9.6460e-01, -3.5004e-01, -1.0047e+00,  1.9190e-01,  1.2264e-01],\n",
      "        [ 2.4957e-01, -4.2979e-01, -1.0825e-01,  2.3795e-01, -7.3069e-01,\n",
      "         -5.4461e-01, -2.3215e-01, -7.7651e-01,  2.4763e-01,  1.7651e+00],\n",
      "        [-5.5392e-01,  3.3271e-03, -1.0346e+00, -8.5255e-01,  5.0889e-01,\n",
      "         -3.1643e-01,  1.8701e+00,  1.4521e-01, -4.0789e-01,  3.9784e-01],\n",
      "        [-4.2431e-01,  9.5496e-01,  8.6195e-01, -4.6464e-02, -1.8939e-01,\n",
      "         -6.0612e-01,  2.3505e-01, -2.1845e-01,  7.8886e-01, -5.4034e-02],\n",
      "        [-1.3850e+00,  5.5123e-01, -8.1494e-01, -1.5341e+00,  1.0512e+00,\n",
      "          1.6224e+00,  9.7178e-01, -4.3476e-01, -3.6152e-01,  5.7192e-02],\n",
      "        [-1.6139e-01, -6.2227e-01, -1.8102e+00,  2.4705e+00,  1.3481e+00,\n",
      "          9.5170e-01,  4.9961e-01, -1.2351e+00, -1.7409e-01, -3.8581e-01],\n",
      "        [-4.2698e-01,  2.9945e-01,  7.2248e-01,  1.7751e-01, -4.7411e-01,\n",
      "          6.5182e-01,  1.2356e+00,  3.3788e-01, -1.6360e+00,  1.0706e+00],\n",
      "        [-2.1973e+00,  2.1718e+00, -1.6395e+00, -3.0410e-01,  2.1506e-01,\n",
      "          1.1191e+00, -9.9097e-01,  1.2780e+00,  8.8627e-01,  1.2386e+00],\n",
      "        [-1.8730e+00,  4.6919e-01,  1.7278e+00, -6.3286e-01,  1.1967e+00,\n",
      "          5.0470e-01, -4.3300e-02,  1.5281e-02,  1.3781e+00, -1.1944e-01],\n",
      "        [ 6.2789e-01,  4.9907e-01, -1.3802e+00, -1.4067e+00,  1.0610e+00,\n",
      "         -1.9016e-01,  2.3647e+00, -2.9405e-01,  3.3102e-01, -7.5755e-02],\n",
      "        [-1.1796e+00,  9.3448e-01,  1.7127e-01, -1.0628e+00, -3.2125e-01,\n",
      "         -2.4460e-01,  2.3568e-01, -1.5434e-01,  1.1188e+00,  1.1668e-01],\n",
      "        [ 1.7378e+00, -7.2644e-01, -4.9895e-01, -4.2975e-01, -6.9438e-01,\n",
      "         -9.7054e-03,  3.4607e-01,  6.9087e-01,  1.3695e+00, -1.6065e+00],\n",
      "        [ 1.5671e+00, -4.4938e-01, -1.8529e+00, -9.5933e-01,  6.2137e-01,\n",
      "          2.6071e+00,  1.3950e+00, -9.4777e-01, -8.9372e-02, -1.1457e+00],\n",
      "        [-1.0904e+00, -8.6417e-01,  2.6958e+00, -7.4350e-02,  1.3770e+00,\n",
      "         -4.3476e-01, -1.8613e+00,  1.8497e+00,  7.1339e-03,  2.5872e-02],\n",
      "        [-6.2598e-01, -2.5726e-01, -4.6892e-01, -1.1368e+00,  1.6985e+00,\n",
      "          9.0804e-02,  1.3954e+00, -6.2800e-01, -4.8128e-01,  5.4954e-01],\n",
      "        [-1.7454e+00, -5.6049e-01,  2.1546e-01, -2.2793e+00,  1.9020e+00,\n",
      "          1.0112e+00,  2.8597e+00,  5.0079e-01, -3.2820e-01, -1.0195e+00],\n",
      "        [ 1.4120e-01,  2.7168e-01, -4.4335e-01, -1.1074e+00, -2.4970e-01,\n",
      "         -5.2490e-01, -1.3297e+00,  9.3997e-01, -4.6388e-01,  1.8707e-01],\n",
      "        [ 8.3418e-01,  1.8049e-01, -1.0929e+00,  1.8742e-02,  2.3085e-02,\n",
      "         -8.2133e-01,  1.8755e+00, -6.6693e-01,  3.0193e-01,  1.4619e+00],\n",
      "        [-8.6161e-01, -8.9857e-02,  5.3214e-01, -1.1791e+00, -5.4008e-01,\n",
      "         -1.0068e-01,  4.9038e-01,  1.5986e+00, -7.4501e-01, -6.4028e-01],\n",
      "        [ 1.3726e+00, -3.0951e-01,  1.2419e+00, -7.1114e-01,  2.9510e-02,\n",
      "         -2.0040e+00, -5.6424e-01,  1.9305e+00,  1.0541e+00, -7.0198e-01],\n",
      "        [-1.9477e-02,  4.2496e-02,  2.7002e-01,  3.6314e-01, -6.0009e-02,\n",
      "         -1.2698e+00,  5.2273e-01, -7.3401e-01,  6.4773e-01,  8.4045e-02],\n",
      "        [ 2.2052e+00, -7.4137e-01,  4.7775e-01,  1.8912e+00,  7.6152e-02,\n",
      "         -8.4810e-01, -1.4815e+00, -2.1619e-01, -3.3044e-01,  6.7078e-01],\n",
      "        [-2.0444e-01, -5.3425e-01,  9.8206e-02,  1.0950e+00,  1.0184e+00,\n",
      "          9.0930e-02, -8.2088e-01,  7.8943e-01, -5.6027e-01,  8.9558e-02],\n",
      "        [-5.8909e-01,  5.3833e-01, -5.4572e-01, -5.6286e-01,  4.5747e-02,\n",
      "          3.4453e+00, -1.6034e+00,  2.9454e-01,  1.8805e-01, -3.9182e-03],\n",
      "        [ 7.8273e-01, -1.7024e-02,  2.7397e-01, -3.6568e-01,  1.3858e+00,\n",
      "          9.3563e-01,  2.8398e-01, -9.9413e-01, -8.3075e-01,  4.6576e-01],\n",
      "        [-1.5146e-01, -2.2623e+00, -1.3995e+00,  9.0351e-01,  1.1112e+00,\n",
      "         -2.9739e-01,  5.6286e-01,  2.0038e+00, -1.8387e+00,  2.2315e+00],\n",
      "        [-9.8301e-01, -4.9815e-01,  1.1197e+00,  7.5333e-01, -5.9327e-01,\n",
      "         -6.5727e-01,  2.1526e+00, -1.0464e+00,  2.4143e-01, -4.7996e-01],\n",
      "        [ 8.1212e-01, -7.3347e-02, -1.9974e-01,  4.1294e-01, -7.3673e-02,\n",
      "          5.2661e-01,  1.0399e-01, -1.4495e+00, -3.9714e-01,  3.9004e-01],\n",
      "        [ 1.0704e+00,  1.9152e+00,  5.2606e-01,  3.2234e-01, -1.0436e+00,\n",
      "          3.1319e-01, -1.0939e-01,  1.2363e-01,  8.4218e-01, -2.0098e-01],\n",
      "        [-8.3487e-01, -1.8473e+00, -6.4477e-01,  1.6047e+00, -3.2689e+00,\n",
      "          1.1499e+00,  8.4633e-01,  1.7705e+00, -6.3103e-01, -2.5735e-02],\n",
      "        [-4.0720e-01, -2.9785e-01, -1.3768e-01, -1.6933e+00, -5.7297e-01,\n",
      "          2.3763e-01,  7.8456e-01,  2.0152e+00,  2.0204e-01,  2.9499e-01]])\n"
     ]
    }
   ],
   "source": [
    "# Number of loops on all sample\n",
    "L=[]\n",
    "for epoch in range(N_epochs):\n",
    "    L.append(loss.data.numpy())\n",
    "    # Loop on data events and target values\n",
    "    for x_i, y_i in zip(x, y):\n",
    "        \n",
    "        # compute predicted target variable\n",
    "        m = torch.nn.ReLU()\n",
    "        y_pred = m(x_i.matmul(w1)).matmul(w2)\n",
    "                \n",
    "        # compute Mean Squared Error (MSE)\n",
    "        loss = sum(y_pred - y_i) ** 2\n",
    "        \n",
    "        # With PyTorch we can automatically compute the derivative of the loss \n",
    "        # w.r.t. the tensors that have requires_grad set to True (i.e. weights).\n",
    "        # compute gradients\n",
    "        loss.backward()\n",
    "                        \n",
    "        #print('\\t x=%.1f y=%.1f, w=%.2f, dloss/dw=%.1f' % (x_i, y_i, w1.data, w1.grad.data))\n",
    "                \n",
    "        # make one step towards the local minima, with learning rate 0.01\n",
    "        w1.data -= learning_rate * w1.grad.data\n",
    "        w2.data -= learning_rate * w2.grad.data\n",
    "        # clear gradients after updating weights\n",
    "        w1.grad.data.zero_()\n",
    "        w2.grad.data.zero_()\n",
    "    #print('Loss at epoch #%d: %.6f \\n' % (epoch+1, loss.data[0]))\n",
    "\n",
    "print(w1.data)\n",
    "print(w2.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the model performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.linspace(0,N_epochs,N_epochs),L);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32000"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
