{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# California Housing Data\n",
    "\n",
    "The objective of this execice is to build a linear model to predict the homes price given a set of feature. \n",
    "\n",
    "This dataset was derived from the 1990 U.S. census, using one row per census block group. A block group is the smallest geographical unit for which the U.S. Census Bureau publishes sample data (a block group typically has a population of 600 to 3,000 people).\n",
    "\n",
    "Features\n",
    "* MedInc median income in block group\n",
    "* HouseAge median house age in block group\n",
    "* AveRooms average number of rooms per household\n",
    "* AveBedrms average number of bedrooms per household\n",
    "* Population block group population\n",
    "* AveOccup average number of household members\n",
    "* Latitude block group latitude\n",
    "* Longitude block group longitude\n",
    "\n",
    "The target variable is the median house value for California districts, expressed in hundreds of thousands of dollars ($100,000).\n",
    "\n",
    "A household is a group of people residing within a home. Since the average number of rooms and bedrooms in this dataset are provided per household, these columns may take surprisingly large values for block groups with few households and many empty houses, such as vacation resorts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import libraries\n",
    "\n",
    "Libraries needed for this exercice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "from pandas import read_csv\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "from sklearn.datasets import fetch_california_housing\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load the dataset\n",
    "\n",
    "We will import the housing data from the scikit-learn library. The data comes in the form of a dictionary-like object.\n",
    "\n",
    "a) How many lines and column does this dataset have ? Show the first 5 examples.\n",
    "\n",
    "b) Check there are no missing values. For this use `isnull().sum()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
      "0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n",
      "1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n",
      "2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n",
      "3  5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n",
      "4  3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n",
      "\n",
      "   Longitude  \n",
      "0    -122.23  \n",
      "1    -122.22  \n",
      "2    -122.24  \n",
      "3    -122.25  \n",
      "4    -122.25  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "MedInc        0\n",
       "HouseAge      0\n",
       "AveRooms      0\n",
       "AveBedrms     0\n",
       "Population    0\n",
       "AveOccup      0\n",
       "Latitude      0\n",
       "Longitude     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get dataset\n",
    "housing = fetch_california_housing(as_frame=True)\n",
    "type(housing)\n",
    "df = pd.DataFrame(data=housing.data, columns=housing.feature_names)\n",
    "# a) Show some examples\n",
    "\n",
    "print(df.head())\n",
    "# b) Check if there are any missing values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Data exploration\n",
    "\n",
    "We first assign features values to numpy array $X$ and target values to numpy array $y$\n",
    "\n",
    "a) check the dimension of $X$ and $y$\n",
    "\n",
    "b) Make histograms for each features and for the target\n",
    "\n",
    "c) Show scatter plots of each feature vs the target (optional: calculate correlation coefficient)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Xdim : (20640, 8)\n",
      "ydim : (20640,)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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yspKrkwCAACSbiLEHDt2TFOnTrXXV61aJUlauHChtm/frueff159fX167rnn1N3dreLiYu3bt08ZGRn2azZt2qTU1FTNnz9ffX19mj59urZv366UlBS7ZteuXVq5cqV9FVNVVdW33psGAAAMP45oNBpNdBNDIRwOy7IshUIhzo/5f/e/sCfRLQAwzLkNsxPdwrBh4v/RQ/HvI57vb56dBAAAjESIAQAARiLEAAAAIxFiAACAkeK+OgnfMPEELAAAkgkzMQAAwEiEGAAAYCRCDAAAMBIhBgAAGIkQAwAAjESIAQAARiLEAAAAIxFiAACAkQgxAADASIQYAABgJB47AAD4ViY+YuXchtmJbgG3CTMxAADASIQYAABgJEIMAAAwEiEGAAAYiRADAACMRIgBAABGIsQAAAAjEWIAAICRCDEAAMBIhBgAAGAkQgwAADASIQYAABiJEAMAAIxEiAEAAEYixAAAACMRYgAAgJFueYipra2Vw+GIWTwej709Go2qtrZWeXl5GjlypKZMmaKTJ0/G7CMSiWjFihXKyclRenq6qqqqdP78+VvdKgAAMNiQzMQ89NBD6ujosJfjx4/b21555RVt3LhR9fX1am1tlcfj0YwZM3Tp0iW7pqamRo2NjWpoaNDBgwfV29uryspKDQwMDEW7AADAQKlDstPU1JjZl6ui0ahee+01vfjii5o3b54k6e2335bb7dbu3bv1zDPPKBQKadu2bdqxY4fKysokSTt37lR+fr7279+vmTNnDkXLAADAMEMyE3PmzBnl5eWpoKBAP/rRj/T73/9eknT27FkFg0GVl5fbtU6nU48//rgOHTokSWpra9OVK1diavLy8lRYWGjXXE8kElE4HI5ZAABA8rrlIaa4uFjvvPOO/vu//1tbt25VMBhUaWmpLl68qGAwKElyu90xr3G73fa2YDCotLQ0jRo16ltrrqeurk6WZdlLfn7+LT4yAABwJ7nlIaaiokJPPfWUJk6cqLKyMu3Zs0fSNz8bXeVwOGJeE41GB41d6y/VrF27VqFQyF7a29u/x1EAAIA73ZCcE/Pn0tPTNXHiRJ05c0Zz586V9M1sS25url3T1dVlz854PB719/eru7s7Zjamq6tLpaWl3/o+TqdTTqdzaA4CAGCM+1/Yk+gWcJsM+X1iIpGITp06pdzcXBUUFMjj8aipqcne3t/f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ampqihlvampSaWlpgroCbq1oNKrly5frvffe08cff6yCgoJEtzQsRaNRRSKRRLeRtKZPn67jx48rEAjYy+TJk/X0008rEAgQYG6DSCSiU6dOKTc3NyHvP+xmYiRp1apV8vl8mjx5srxer95880198cUXevbZZxPdWtLq7e3VZ599Zq+fPXtWgUBAWVlZuu+++xLYWXJatmyZdu/erQ8++EAZGRn2zKNlWRo5cmSCu0tO69atU0VFhfLz83Xp0iU1NDTowIED8vv9iW4taWVkZAw6zys9PV3Z2dmc/zVE1qxZozlz5ui+++5TV1eXXn75ZYXDYS1cuDAh/QzLELNgwQJdvHhRP/vZz9TR0aHCwkLt3btXY8aMSXRrSevYsWOaOnWqvX71t9OFCxdq+/btCeoqeV29fcCUKVNixt966y0tWrTo9jc0DHR2dsrn86mjo0OWZWnSpEny+/2aMWNGolsDbpnz58/rxz/+sb766ivde++9KikpUUtLS8K+P4flfWIAAID5ht05MQAAIDkQYgAAgJEIMQAAwEiEGAAAYCRCDAAAMBIhBgAAGIkQAwAAjESIAQAARiLEAAAAIxFiAACAkQgxAADASIQYAABgpP8DBqo7oqGQEtwAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Get data\n",
    "X = housing.data.to_numpy()   # Features\n",
    "y = housing.target.to_numpy() # Target\n",
    "\n",
    "# a) X and y dimensions\n",
    "\n",
    "print('Xdim :',np.shape(X))\n",
    "print('ydim :',np.shape(y))\n",
    "\n",
    "# b) Show histograms\n",
    "\n",
    "pd.DataFrame(X).hist()\n",
    "plt.figure()\n",
    "plt.hist(y);\n",
    "\n",
    "# c) Scatter plots\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Split data in train and test samples\n",
    "\n",
    "We now split the total dataset in a train and a test sample using scikit-learn.\n",
    "\n",
    "Look at the size of each sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train size: 14448\n",
      "X_test size: 6192\n",
      "y_train size: 14448\n",
      "y_test size: 6192\n"
     ]
    }
   ],
   "source": [
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=3)\n",
    "\n",
    "print('X_train size:', np.shape(X_train)[0])\n",
    "print('X_test size:', np.shape(X_test)[0])\n",
    "print('y_train size:', np.shape(y_train)[0])\n",
    "print('y_test size:', np.shape(y_test)[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Linear regression\n",
    "\n",
    "Now let's construct a predictive model using linear regression:\n",
    "\n",
    "$$y_{pred} = w_0 + \\sum_{i=1}^{N=13} w_i X_i$$\n",
    "\n",
    "For this we use the scikit-learn model described here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\n",
    "\n",
    "a) Fit the linear regression model using the training dataset and print the parameters (weights and bias term) of the fit.\n",
    "\n",
    "b) Get the predicted model output, `y_train_pred`, using the training dataset. Make a scatter plot of the true target value, `y_train`, vs the predicted value, `y_train_pred`. Then, plot the difference `(y_train - y_train_pred)` in a histogram.\n",
    "\n",
    "c) Calculate the root mean square error (RMS) between `y_train` and `y_train_pred`. For this you can use the scikit-learn function `mean_squared_error()`.\n",
    "\n",
    "d) Finally we apply the model to the test dataset: repeat steps b) and c) with the test sample. Do you think that the model is acceptable ? Is there an overfitting problem ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit of the model\n",
    "model1 = LinearRegression()\n",
    "model1.fit(X_train,y_train)\n",
    "y_train_pred = model1.predict(X_train)\n",
    "plt.figure()\n",
    "plt.scatter(y_train,y_train_pred)\n",
    "plt.xlabel('y_train')\n",
    "plt.ylabel('y_train_pred')\n",
    "plt.title('y_train_pred vs y_train')\n",
    "plt.figure()\n",
    "plt.hist(y_train-y_train_pred)\n",
    "plt.title('Histogram of (y_train - y_train_pred)');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 0.5246635007591492\n"
     ]
    }
   ],
   "source": [
    "print('RMSE:', mean_squared_error(y_train_pred, y_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Ridge penalty (a.k.a L2 norm)\n",
    "\n",
    "Let's see if a penalized linear algorithm can improve the modelling and prediction of the data. For this we use Ridge regression (also called L2 norm) which adds a penalty term to the fit model:\n",
    "\n",
    "$$y_{pred} = w_0 + \\sum_{i=1}^{N=13} w_i X_i + \\lambda \\sum_{i=0}^{N=13} w_i^2$$\n",
    "\n",
    "See the scikit-learn implementation https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html\n",
    "\n",
    "a) Train the model using the training dataset and a $\\lambda$ regularization parameter =1\n",
    "\n",
    "b) Apply the algorithm to the test data and check the quality of the model. Do you see any improvement in the data modelling and prediction ? Try other values of $\\lambda$.\n",
    "\n",
    "c) Optional, try Lasso penalty: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html. Does it help ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE lambda=1 0.52466364039712\n"
     ]
    }
   ],
   "source": [
    "# define model\n",
    "model2 = Ridge(alpha=1) # Alpha sets the lambda (yes...) hyperparameter \n",
    "model2.fit(X_train, y_train)\n",
    "y_train_ridge = model2.predict(X_train)\n",
    "print('RMSE lambda=1',mean_squared_error(y_train_ridge,y_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No real improvement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE lambda=0.0 0.5246635007591492\n",
      "RMSE lambda=0.1 0.5246635021618273\n",
      "RMSE lambda=0.2 0.5246635063670535\n",
      "RMSE lambda=0.3 0.5246635133706208\n",
      "RMSE lambda=0.4 0.5246635231683283\n",
      "RMSE lambda=0.5 0.5246635357559822\n",
      "RMSE lambda=0.6 0.5246635511293952\n",
      "RMSE lambda=0.7 0.5246635692843864\n",
      "RMSE lambda=0.8 0.5246635902167818\n",
      "RMSE lambda=0.9 0.5246636139224132\n",
      "RMSE lambda=1.0 0.52466364039712\n"
     ]
    }
   ],
   "source": [
    "for i in np.linspace(0,1,11):\n",
    "    model2 = Ridge(alpha=i) # Alpha sets the lambda (yes...) hyperparameter \n",
    "    model2.fit(X_train, y_train)\n",
    "    y_train_ridge = model2.predict(X_train)\n",
    "    print(f'RMSE lambda={np.round(i,2)}', mean_squared_error(y_train_ridge,y_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Estimating model performance: Cross-validation\n",
    "\n",
    "Instead of splitting the dataset in one training and one test samples we can use cross-validation to better determine the performance of a fit model. For this we apply the following [procedure](https://machinelearningmastery.com/k-fold-cross-validation/):\n",
    "- Shuffle the dataset randomly.\n",
    "- Split the dataset into k groups\n",
    "- For each unique group:\n",
    "  - Take the group as test data set\n",
    "  - Take the k-1 remaining groups as a training data set\n",
    "  - Fit a model on the training set and evaluate it on the test set\n",
    "  - Retain the evaluation score and discard the model\n",
    "- Summarize the skill of the model using the sample of model evaluation scores\n",
    "\n",
    "a) Look at the example below, what are the different parameters ? To what corresponds the output ?\n",
    "\n",
    "b) Apply the cross-validation to the other models. Can you say if one is more performant than the other ?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean RMS: 0.75 +- 0.04\n",
      "Mean RMS: 0.75 +- 0.04\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "\n",
    "cv = KFold(n_splits=5, shuffle=False)\n",
    "scores = cross_val_score(model1, X, y, scoring='neg_mean_squared_error', cv=cv)\n",
    "scores = np.absolute(scores)\n",
    "print('Mean RMS: %.2f +- %.2f' % (np.mean(np.sqrt(scores)),np.std(np.sqrt(scores))))\n",
    "scores2 = cross_val_score(model2, X, y, scoring='neg_mean_squared_error', cv=cv)\n",
    "scores2 = np.absolute(scores2)\n",
    "print('Mean RMS: %.2f +- %.2f' % (np.mean(np.sqrt(scores2)),np.std(np.sqrt(scores2))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Optional: Improve the model ?\n",
    "\n",
    "A much better result can be achieved by pre-processing the data and adding some non-linerity to the model with using a neural network \n",
    "\n",
    "a) First, standardize all features by removing the mean and scaling to unit variance using [StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html).\n",
    "\n",
    "b) Try to implement a neural network with [Multi-layer Perceptron regressor](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html#sklearn.neural_network.MLPRegressor). For example, two hidden layers with 100 and 50 neurons each and relu activation function does a decent job."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.344766</td>\n",
       "      <td>0.982143</td>\n",
       "      <td>0.628559</td>\n",
       "      <td>-0.153758</td>\n",
       "      <td>-0.974429</td>\n",
       "      <td>-0.049597</td>\n",
       "      <td>1.052548</td>\n",
       "      <td>-1.327835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.332238</td>\n",
       "      <td>-0.607019</td>\n",
       "      <td>0.327041</td>\n",
       "      <td>-0.263336</td>\n",
       "      <td>0.861439</td>\n",
       "      <td>-0.092512</td>\n",
       "      <td>1.043185</td>\n",
       "      <td>-1.322844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.782699</td>\n",
       "      <td>1.856182</td>\n",
       "      <td>1.155620</td>\n",
       "      <td>-0.049016</td>\n",
       "      <td>-0.820777</td>\n",
       "      <td>-0.025843</td>\n",
       "      <td>1.038503</td>\n",
       "      <td>-1.332827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.932968</td>\n",
       "      <td>1.856182</td>\n",
       "      <td>0.156966</td>\n",
       "      <td>-0.049833</td>\n",
       "      <td>-0.766028</td>\n",
       "      <td>-0.050329</td>\n",
       "      <td>1.038503</td>\n",
       "      <td>-1.337818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.012881</td>\n",
       "      <td>1.856182</td>\n",
       "      <td>0.344711</td>\n",
       "      <td>-0.032906</td>\n",
       "      <td>-0.759847</td>\n",
       "      <td>-0.085616</td>\n",
       "      <td>1.038503</td>\n",
       "      <td>-1.337818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20635</th>\n",
       "      <td>-1.216128</td>\n",
       "      <td>-0.289187</td>\n",
       "      <td>-0.155023</td>\n",
       "      <td>0.077354</td>\n",
       "      <td>-0.512592</td>\n",
       "      <td>-0.049110</td>\n",
       "      <td>1.801647</td>\n",
       "      <td>-0.758826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20636</th>\n",
       "      <td>-0.691593</td>\n",
       "      <td>-0.845393</td>\n",
       "      <td>0.276881</td>\n",
       "      <td>0.462365</td>\n",
       "      <td>-0.944405</td>\n",
       "      <td>0.005021</td>\n",
       "      <td>1.806329</td>\n",
       "      <td>-0.818722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20637</th>\n",
       "      <td>-1.142593</td>\n",
       "      <td>-0.924851</td>\n",
       "      <td>-0.090318</td>\n",
       "      <td>0.049414</td>\n",
       "      <td>-0.369537</td>\n",
       "      <td>-0.071735</td>\n",
       "      <td>1.778237</td>\n",
       "      <td>-0.823713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20638</th>\n",
       "      <td>-1.054583</td>\n",
       "      <td>-0.845393</td>\n",
       "      <td>-0.040211</td>\n",
       "      <td>0.158778</td>\n",
       "      <td>-0.604429</td>\n",
       "      <td>-0.091225</td>\n",
       "      <td>1.778237</td>\n",
       "      <td>-0.873626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20639</th>\n",
       "      <td>-0.780129</td>\n",
       "      <td>-1.004309</td>\n",
       "      <td>-0.070443</td>\n",
       "      <td>0.138403</td>\n",
       "      <td>-0.033977</td>\n",
       "      <td>-0.043682</td>\n",
       "      <td>1.750146</td>\n",
       "      <td>-0.833696</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20640 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              0         1         2         3         4         5         6  \\\n",
       "0      2.344766  0.982143  0.628559 -0.153758 -0.974429 -0.049597  1.052548   \n",
       "1      2.332238 -0.607019  0.327041 -0.263336  0.861439 -0.092512  1.043185   \n",
       "2      1.782699  1.856182  1.155620 -0.049016 -0.820777 -0.025843  1.038503   \n",
       "3      0.932968  1.856182  0.156966 -0.049833 -0.766028 -0.050329  1.038503   \n",
       "4     -0.012881  1.856182  0.344711 -0.032906 -0.759847 -0.085616  1.038503   \n",
       "...         ...       ...       ...       ...       ...       ...       ...   \n",
       "20635 -1.216128 -0.289187 -0.155023  0.077354 -0.512592 -0.049110  1.801647   \n",
       "20636 -0.691593 -0.845393  0.276881  0.462365 -0.944405  0.005021  1.806329   \n",
       "20637 -1.142593 -0.924851 -0.090318  0.049414 -0.369537 -0.071735  1.778237   \n",
       "20638 -1.054583 -0.845393 -0.040211  0.158778 -0.604429 -0.091225  1.778237   \n",
       "20639 -0.780129 -1.004309 -0.070443  0.138403 -0.033977 -0.043682  1.750146   \n",
       "\n",
       "              7  \n",
       "0     -1.327835  \n",
       "1     -1.322844  \n",
       "2     -1.332827  \n",
       "3     -1.337818  \n",
       "4     -1.337818  \n",
       "...         ...  \n",
       "20635 -0.758826  \n",
       "20636 -0.818722  \n",
       "20637 -0.823713  \n",
       "20638 -0.873626  \n",
       "20639 -0.833696  \n",
       "\n",
       "[20640 rows x 8 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(df)\n",
    "df_scaled= scaler.fit_transform(df)\n",
    "df_scaled = pd.DataFrame(df_scaled)\n",
    "df_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
